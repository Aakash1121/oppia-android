syntax = "proto3";

package model;

option java_package = "org.oppia.android.app.model";
option java_multiple_files = true;

// Structure for a fraction object.
message Fraction {
  bool is_negative = 1;
  int32 whole_number = 2;
  int32 numerator = 3;
  int32 denominator = 4;
}

// Represents a mathematical expression such as 1+2. The only expression currently supported is a
// binary operation.
message MathExpression {
  // TODO: document inclusive
  int32 parse_start_index = 1;
  // TODO: document exclusive
  int32 parse_end_index = 2;

  oneof expression_type {
    Real constant = 3;
    string variable = 4;
    MathBinaryOperation binary_operation = 5;
    MathUnaryOperation unary_operation = 6;
    MathFunctionCall function_call = 7;
    MathExpression group = 8;
  }
}

message MathEquation {
  MathExpression left_side = 1;
  MathExpression right_side = 2;
}

message MathBinaryOperation {
  enum Operator {
    OPERATOR_UNSPECIFIED = 0;
    // Represents adding two values, e.g.: 1+x.
    ADD = 1;
    // Represents subtracting two values, e.g.: x-2.
    SUBTRACT = 2;
    // Represents multiplying two values, e.g.: x*y.
    MULTIPLY = 3;
    // Represents dividing two values, e.g.: 1/x.
    DIVIDE = 4;
    // Represents taking the exponentiation of one value by another, e.g.: x^2.
    EXPONENTIATE = 5;
  }

  Operator operator = 1;
  MathExpression left_operand = 2;
  MathExpression right_operand = 3;
  bool is_implicit = 4;
}

message MathUnaryOperation {
  enum Operator {
    OPERATOR_UNSPECIFIED = 0;
    // Represents negating a value, e.g.: -y.
    NEGATE = 1;
    // Represents indicating a value as positive, e.g.: +y.
    POSITIVE = 2;
  }

  Operator operator = 1;
  MathExpression operand = 2;
}

message MathFunctionCall {
  enum FunctionType {
    FUNCTION_UNSPECIFIED = 0;
    SQUARE_ROOT = 1;
  }

  FunctionType function_type = 1;
  MathExpression argument = 2;
}

message Real {
  oneof real_type {
    Fraction rational = 1;
    // Represents a decimal value. Technically these can sometimes be rational, but given IEEE-754
    // rounding errors we need to treat these values as irrational and non-factorable.
    double irrational = 2;
    int32 integer = 3;
  }
}

message ComparableOperationList {
  message ComparableOperation {
    bool is_negated = 1;

    oneof comparison_type {
      CommutativeAccumulation commutative_accumulation = 2;
      NonCommutativeOperation non_commutative_operation = 3;
      Real constant_term = 4;
      string variable_term = 5;
    }
  }
  message CommutativeAccumulation {
    enum AccumulationType {
      ACCUMULATION_TYPE_UNSPECIFIED = 0;
      SUMMATION = 1;
      PRODUCT = 2;
    }

    AccumulationType accumulation_type = 1;
    repeated ComparableOperation combined_operations = 2;
  }
  message NonCommutativeOperation {
    oneof operation_type {
      BinaryOperation division = 1;
      BinaryOperation exponentiation = 2;
      ComparableOperation square_root = 3;
    }

    message BinaryOperation {
      ComparableOperation left_operand = 1;
      ComparableOperation right_operand = 2;
    }
  }

  ComparableOperation root_operation = 1;
}

message Polynomial {
  repeated Term term = 1;

  message Term {
    Real coefficient = 1;
    repeated Variable variable = 2;

    message Variable {
      string name = 1;
      int32 power = 2;
    }
  }
}
